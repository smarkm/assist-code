{
	/*
	// Place your snippets for Go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	// Commond Line related 
	"Test Function": {
		"prefix": "tfn",
		"body": [
			"func Test${1}(t *testing.T){${2}",
			"}"
		]
	},
	"Cli cmd": {
		"prefix": "cmd",
		"body": [
			"//${1} command",
			"type ${1} struct {",
			"//UI extend",
			"UI cli.Ui",
			"}",
			"//Run execute functioin",
			"func (c *${1}) Run(args []string) (rs int) {${4}",
			"ip, community, err := ParseIPAndCommunity(args, 1)",
			"if err != nil {",
				"c.UI.Output(err.Error())",
				"c.UI.Output(c.Help())",
				"return 0",
			"}",
			"${4}",
			"return 0",
			"}",
			"//Synopsis Synopsis information",
			"func (c *${1}) Synopsis() string {${2}",
			"}",
			"//Help Help information",
			"func (c *${1}) Help() string {${3}",
			"}"
		]
	},
	"func init()": {
		"prefix": "initfunc",
		"body": [
			"func init() {",
			"${1}",
			"}"
		]
	},
	"echo handler json": {
		"prefix": "ehj",
		"body": [
			"func  ${1}(c echo.Context) error{",
			"    return c.JSON(http.StatusOK,${2})",
			"}"
		]
	},
	"function": {
		"prefix": "function",
		"body": [
			"//${1} ${2}",
			"func  ${1}(${3}) error{${4}",
			"}"
		]
	},

	"CMD app":{
		"prefix": "cmdapp",
		"body": [
			"ui := &cli.BasicUi{Reader: os.Stdin, Writer: os.Stdout, ErrorWriter: os.Stderr}",
			"c := cli.NewCLI(\"${1:appname}\", \"${2:app version}\")",
			"c.Args = os.Args[1:]",
			"c.Commands = map[string]cli.CommandFactory{",
			"\"${3:sub cmd}\":func() (cli.Command, error) {",
				"return &${4:CMD}{UI: ui}, nil",
				"},",
			"}",
		
			"exitStatus, err := c.Run()",
			"if err != nil {",
			"log.Println(err)",
			"}",
		
			"os.Exit(exitStatus)"]
	},

	//Gin related snippet
	"Gin APP":{
		"prefix": "ginapp",
		"body": [
			"router := gin.Default()",
			"${1:gp}:= router.Group(\"/${1:gp}\")",
			"${1:gp}.POST(\"/${2:api}\", ${3:endpoint})",
			"router.Run(\":8080\")",
		]
	},
	"Gin Register Group API":{
		"prefix": "grg",
		"body": [
			"func Register${1:Waht}API(e *gin.RouterGroup) {",
				"e.${2:method}(\"/${3:api}\", func(c *gin.Context) {",
					"${4:imp}",
				"})",
			"}",
		]
	},
	"Gin API":{
		"prefix": "gapi",
		"body": [
			"e.${1:method}(\"/${2:api}\", func(c *gin.Context) {",
				"${3:imp}",
			"}",
		]
	},
	"gin c.JSON() OK": {
		"prefix": "jo",
		"body": [
			"c.JSON(http.StatusOK, to.OKResult(${1}))"
		]
	},
	"gin c.JSON() Error": {
		"prefix": "je",
		"body": [
			"c.JSON(http.StatusOK, to.ErrorResult(${1},err.Error()))",
			"return"
		]
	},
	"c.PostForm(key)": {
		"prefix": "postform",
		"body": [
			"${1} := c.PostForm(\"${1}\")${2}"
		]
	}
}